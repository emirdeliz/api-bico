generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int           @id @default(autoincrement())
  email        String        @unique
  name         String        @db.VarChar(255)
  password     String        @db.VarChar(255)
  state        String        @db.VarChar(2)
  city         String        @db.VarChar(255)
  phone        String        @db.VarChar(255)
  dddPhone     String        @db.VarChar(2)
  salt         String        @db.VarChar(255)
  professional Job[]         @relation("professional")
  customer     Job[]         @relation("customer")
  jobDiscount  JobDiscount[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model JobDiscount {
  id         Int      @id @default(autoincrement())
  jobTypeId  Int      @unique
  jobType    JobType  @relation(fields: [jobTypeId], references: [id])
  percentage Int
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model JobType {
  id          Int           @id @default(autoincrement())
  name        String        @db.VarChar(255)
  jobDiscount JobDiscount[]
  Job         Job[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Job {
  id                          Int      @id @default(autoincrement())
  date                        DateTime
  dateService                 DateTime
  period                      String?  @db.VarChar(50)
  observation                 String?  @db.VarChar(1055)
  deadlineEvaluation          Float
  priceEvaluation             Float
  qualityEvaluation           Float
  afterSalesServiceEvaluation Float
  professionalId              Int
  professional                User     @relation("professional", fields: [professionalId], references: [id], onDelete: NoAction)
  customerId                  Int
  customer                    User     @relation("customer", fields: [customerId], references: [id], onDelete: NoAction)
  photos                      String[] @db.VarChar(255)
  jobTypeId                   Int
  jobType                     JobType  @relation(fields: [jobTypeId], references: [id], onDelete: NoAction)
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt

  @@index([customerId])
}
